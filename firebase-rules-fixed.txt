
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Função auxiliar para verificar se é admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    // Função auxiliar para verificar se é o próprio usuário
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Função auxiliar para verificar se é empresa dona do recurso
    function isCompanyOwner(companyId) {
      return request.auth != null && request.auth.uid == companyId;
    }
    
    // Regras para usuários
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
      allow create: if request.auth != null;
    }
    
    // Regras para empresas
    match /companies/{companyId} {
      allow read, write: if isCompanyOwner(companyId) || isAdmin();
      allow create: if request.auth != null;
    }
    
    // Regras para funcionários - CORRIGIDO para permitir leitura por empresa
    match /employees/{employeeId} {
      allow read: if request.auth != null && (
        isCompanyOwner(resource.data.companyId) || 
        isAdmin() ||
        resource.data.companyId == request.auth.uid
      );
      allow write: if request.auth != null && (
        isCompanyOwner(resource.data.companyId) || 
        isAdmin() ||
        resource.data.companyId == request.auth.uid
      );
      allow create: if request.auth != null && (
        isCompanyOwner(request.resource.data.companyId) || 
        isAdmin() ||
        request.resource.data.companyId == request.auth.uid
      );
    }
    
    // Regras para agendamentos - CORRIGIDO para permitir todas as operações necessárias
    match /appointments/{appointmentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isCompanyOwner(resource.data.companyId) || 
        isAdmin() ||
        resource.data.companyId == request.auth.uid
      );
      allow create: if request.auth != null && (
        isCompanyOwner(request.resource.data.companyId) || 
        isAdmin() ||
        request.resource.data.companyId == request.auth.uid
      );
      allow update: if request.auth != null && (
        isCompanyOwner(resource.data.companyId) || 
        isAdmin() ||
        resource.data.companyId == request.auth.uid
      );
      allow delete: if request.auth != null && (
        isCompanyOwner(resource.data.companyId) || 
        isAdmin() ||
        resource.data.companyId == request.auth.uid
      );
    }
    
    // Regras para tipos de exame
    match /examTypes/{examTypeId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para limites de agendamento - CORRIGIDO
    match /appointmentLimits/{limitId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para datas bloqueadas - CORRIGIDO
    match /blockedDates/{dateId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para capacidade da clínica - CORRIGIDO
    match /clinicCapacity/{capacityId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para notificações - CORRIGIDO para permitir marcar como lida
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (
        resource.data.recipientId == request.auth.uid || 
        resource.data.recipientId == "all" ||
        isAdmin()
      );
      
      allow write: if request.auth != null && (
        resource.data.recipientId == request.auth.uid || 
        resource.data.recipientId == "all" ||
        isAdmin()
      );
      
      allow update: if request.auth != null && (
        resource.data.recipientId == request.auth.uid || 
        resource.data.recipientId == "all" ||
        isAdmin()
      );
      
      allow create: if request.auth != null;
    }
    
    // Regras para notificações ocultas do usuário - NOVO
    match /userHiddenNotifications/{userId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
      allow create: if request.auth != null;
    }
    
    // Regras para horários bloqueados - CORRIGIDO
    match /blockedTimeSlots/{slotId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
  }
}
