
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Função auxiliar para verificar se é admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    // Função auxiliar para verificar se é o próprio usuário
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Função auxiliar para verificar se é empresa dona do recurso
    function isCompanyOwner(companyId) {
      return request.auth != null && request.auth.uid == companyId;
    }
    
    // Regras para usuários
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
      allow create: if request.auth != null;
    }
    
    // Regras para empresas
    match /companies/{companyId} {
      allow read, write: if isCompanyOwner(companyId) || isAdmin();
      allow create: if request.auth != null;
    }
    
    // Regras para funcionários
    match /employees/{employeeId} {
      allow read, write: if isCompanyOwner(resource.data.companyId) || isAdmin();
      allow create: if request.auth != null && 
        (isCompanyOwner(request.resource.data.companyId) || isAdmin());
    }
    
    // Regras para agendamentos - CORRIGIDO para permitir leitura geral necessária para verificação de capacidade
    match /appointments/{appointmentId} {
      allow read: if request.auth != null; // Permite leitura para verificação de capacidade
      allow write: if isCompanyOwner(resource.data.companyId) || isAdmin();
      allow create: if request.auth != null && 
        (isCompanyOwner(request.resource.data.companyId) || isAdmin());
    }
    
    // Regras para tipos de exame
    match /examTypes/{examTypeId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para limites de agendamento
    match /appointmentLimits/{limitId} {
      allow read: if request.auth != null; // Necessário para verificação de capacidade
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para datas bloqueadas
    match /blockedDates/{dateId} {
      allow read: if request.auth != null; // Necessário para verificação de datas
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para capacidade da clínica
    match /clinicCapacity/{capacityId} {
      allow read: if request.auth != null; // Necessário para verificação de capacidade
      allow write, create, delete: if isAdmin();
    }
    
    // Regras para notificações - CORRIGIDO
    match /notifications/{notificationId} {
      // Permite leitura se for o destinatário ou admin
      allow read: if request.auth != null && 
        (resource.data.recipientId == request.auth.uid || isAdmin());
      
      // Permite escrita (marcar como lida) se for o destinatário
      allow write: if request.auth != null && 
        (resource.data.recipientId == request.auth.uid || isAdmin());
      
      // Permite criação por qualquer usuário autenticado (para sistema de notificações)
      allow create: if request.auth != null;
    }
    
    // Regras para horários bloqueados
    match /blockedTimeSlots/{slotId} {
      allow read: if request.auth != null; // Necessário para verificação de horários
      allow write, create, delete: if isAdmin();
    }
  }
}
